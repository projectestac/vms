#!/bin/bash

#Exemple invocaci√≥: ./vm agora start

function start_vm {
    project=$1
    homedir=$2
    clone_project $project $homedir
    echo "Starting VM $project..."
    vagrant up
    echo "Running upgrade if needed"
    vagrant ssh -c "/vagrant/provision/upgrade.sh $project"
}


function clone_project {
    project=$1
    homedir=$2
    if [ ! -d "$homedir/../$project" ]; then
        echo 'Project not found, cloning...'
        git clone git@github.com:projectestac/$project.git $homedir/../$project
        pushd $homedir/../$project
        git submodule update --recursive --init
        popd
    fi
}

function upgrade_vm {
    project=$1
    vagrant ssh -c /vagrant/upgrade.sh $project
}

if [ "$#" -lt 1 ] ; then
    echo "Virtual Machines Manager"
    echo "Usage: vm <project> [<action>]"
    echo "Accepted projects: agora, alexandria, all [totes]"
    echo "Actions:"
    echo "start: Starts the VM [default action]"
    echo "ssh: Enters to the VM through ssh (starting if needed)"
    echo "stop: Stops the VM"
    echo "reboot: Reboots the VM"
    echo "destroy: Completely destroys the VM. Asks for confirmation."
    exit 0
fi

project=`echo $1 | tr '[:upper:]' '[:lower:]'`
action=`echo $2 | tr '[:upper:]' '[:lower:]'`
homedir=`pwd`

if [ ! -d "$project" ]; then
    echo "Project $project does not exists"
    exit 0
fi

if [[ $project == "provision" ]]; then
    echo "Provision is not a valid project"
    exit 0
fi

if [[ $action == "" ]]; then
    action='start'
fi

git pull

pushd $project

case "$action" in
"start")
    start_vm $project $homedir
    ;;
"stop")
    echo "Stopping VM $project..."
    vagrant halt
    ;;
"ssh")
    start_vm $project $homedir
    echo "Entering into VM $project..."
    vagrant ssh
    ;;
"reboot")
    echo "Restarting VM $project..."
    vagrant halt
    start_vm $project $homedir
    ;;
"destroy")
    echo "Destroying VM $project!!!"
    vagrant destroy
    ;;
*)
    echo "Action $action not recognized"
    ;;
esac

popd

